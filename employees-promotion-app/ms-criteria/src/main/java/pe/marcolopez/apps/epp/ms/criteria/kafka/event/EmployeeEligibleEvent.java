/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pe.marcolopez.apps.epp.ms.criteria.kafka.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EmployeeEligibleEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1572734862289197985L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeEligibleEvent\",\"namespace\":\"pe.marcolopez.apps.epp.ms.criteria.kafka.event\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"firstname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currentLevel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hireDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"certifications\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"productionProjects\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeEligibleEvent> ENCODER =
      new BinaryMessageEncoder<EmployeeEligibleEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeEligibleEvent> DECODER =
      new BinaryMessageDecoder<EmployeeEligibleEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeEligibleEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeEligibleEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeEligibleEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeEligibleEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeEligibleEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeEligibleEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeEligibleEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeEligibleEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String firstname;
  private java.lang.String lastname;
  private java.lang.String address;
  private java.lang.String email;
  private java.lang.String currentLevel;
  private java.lang.String hireDate;
  private java.lang.Integer certifications;
  private java.lang.Integer productionProjects;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeEligibleEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param firstname The new value for firstname
   * @param lastname The new value for lastname
   * @param address The new value for address
   * @param email The new value for email
   * @param currentLevel The new value for currentLevel
   * @param hireDate The new value for hireDate
   * @param certifications The new value for certifications
   * @param productionProjects The new value for productionProjects
   */
  public EmployeeEligibleEvent(java.lang.String id, java.lang.String firstname, java.lang.String lastname, java.lang.String address, java.lang.String email, java.lang.String currentLevel, java.lang.String hireDate, java.lang.Integer certifications, java.lang.Integer productionProjects) {
    this.id = id;
    this.firstname = firstname;
    this.lastname = lastname;
    this.address = address;
    this.email = email;
    this.currentLevel = currentLevel;
    this.hireDate = hireDate;
    this.certifications = certifications;
    this.productionProjects = productionProjects;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return firstname;
    case 2: return lastname;
    case 3: return address;
    case 4: return email;
    case 5: return currentLevel;
    case 6: return hireDate;
    case 7: return certifications;
    case 8: return productionProjects;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: firstname = value$ != null ? value$.toString() : null; break;
    case 2: lastname = value$ != null ? value$.toString() : null; break;
    case 3: address = value$ != null ? value$.toString() : null; break;
    case 4: email = value$ != null ? value$.toString() : null; break;
    case 5: currentLevel = value$ != null ? value$.toString() : null; break;
    case 6: hireDate = value$ != null ? value$.toString() : null; break;
    case 7: certifications = (java.lang.Integer)value$; break;
    case 8: productionProjects = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'firstname' field.
   * @return The value of the 'firstname' field.
   */
  public java.lang.String getFirstname() {
    return firstname;
  }


  /**
   * Sets the value of the 'firstname' field.
   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return The value of the 'lastname' field.
   */
  public java.lang.String getLastname() {
    return lastname;
  }


  /**
   * Sets the value of the 'lastname' field.
   * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.String value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'currentLevel' field.
   * @return The value of the 'currentLevel' field.
   */
  public java.lang.String getCurrentLevel() {
    return currentLevel;
  }


  /**
   * Sets the value of the 'currentLevel' field.
   * @param value the value to set.
   */
  public void setCurrentLevel(java.lang.String value) {
    this.currentLevel = value;
  }

  /**
   * Gets the value of the 'hireDate' field.
   * @return The value of the 'hireDate' field.
   */
  public java.lang.String getHireDate() {
    return hireDate;
  }


  /**
   * Sets the value of the 'hireDate' field.
   * @param value the value to set.
   */
  public void setHireDate(java.lang.String value) {
    this.hireDate = value;
  }

  /**
   * Gets the value of the 'certifications' field.
   * @return The value of the 'certifications' field.
   */
  public java.lang.Integer getCertifications() {
    return certifications;
  }


  /**
   * Sets the value of the 'certifications' field.
   * @param value the value to set.
   */
  public void setCertifications(java.lang.Integer value) {
    this.certifications = value;
  }

  /**
   * Gets the value of the 'productionProjects' field.
   * @return The value of the 'productionProjects' field.
   */
  public java.lang.Integer getProductionProjects() {
    return productionProjects;
  }


  /**
   * Sets the value of the 'productionProjects' field.
   * @param value the value to set.
   */
  public void setProductionProjects(java.lang.Integer value) {
    this.productionProjects = value;
  }

  /**
   * Creates a new EmployeeEligibleEvent RecordBuilder.
   * @return A new EmployeeEligibleEvent RecordBuilder
   */
  public static pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder newBuilder() {
    return new pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder();
  }

  /**
   * Creates a new EmployeeEligibleEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeEligibleEvent RecordBuilder
   */
  public static pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder newBuilder(pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder other) {
    if (other == null) {
      return new pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder();
    } else {
      return new pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeEligibleEvent RecordBuilder by copying an existing EmployeeEligibleEvent instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeEligibleEvent RecordBuilder
   */
  public static pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder newBuilder(pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent other) {
    if (other == null) {
      return new pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder();
    } else {
      return new pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeEligibleEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeEligibleEvent>
    implements org.apache.avro.data.RecordBuilder<EmployeeEligibleEvent> {

    private java.lang.String id;
    private java.lang.String firstname;
    private java.lang.String lastname;
    private java.lang.String address;
    private java.lang.String email;
    private java.lang.String currentLevel;
    private java.lang.String hireDate;
    private java.lang.Integer certifications;
    private java.lang.Integer productionProjects;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstname)) {
        this.firstname = data().deepCopy(fields()[1].schema(), other.firstname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastname)) {
        this.lastname = data().deepCopy(fields()[2].schema(), other.lastname);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currentLevel)) {
        this.currentLevel = data().deepCopy(fields()[5].schema(), other.currentLevel);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[6].schema(), other.hireDate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.certifications)) {
        this.certifications = data().deepCopy(fields()[7].schema(), other.certifications);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.productionProjects)) {
        this.productionProjects = data().deepCopy(fields()[8].schema(), other.productionProjects);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeEligibleEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstname)) {
        this.firstname = data().deepCopy(fields()[1].schema(), other.firstname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastname)) {
        this.lastname = data().deepCopy(fields()[2].schema(), other.lastname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentLevel)) {
        this.currentLevel = data().deepCopy(fields()[5].schema(), other.currentLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[6].schema(), other.hireDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.certifications)) {
        this.certifications = data().deepCopy(fields()[7].schema(), other.certifications);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.productionProjects)) {
        this.productionProjects = data().deepCopy(fields()[8].schema(), other.productionProjects);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstname' field.
      * @return The value.
      */
    public java.lang.String getFirstname() {
      return firstname;
    }


    /**
      * Sets the value of the 'firstname' field.
      * @param value The value of 'firstname'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setFirstname(java.lang.String value) {
      validate(fields()[1], value);
      this.firstname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstname' field has been set.
      * @return True if the 'firstname' field has been set, false otherwise.
      */
    public boolean hasFirstname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstname' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * @return The value.
      */
    public java.lang.String getLastname() {
      return lastname;
    }


    /**
      * Sets the value of the 'lastname' field.
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setLastname(java.lang.String value) {
      validate(fields()[2], value);
      this.lastname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastname' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setAddress(java.lang.String value) {
      validate(fields()[3], value);
      this.address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearAddress() {
      address = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setEmail(java.lang.String value) {
      validate(fields()[4], value);
      this.email = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentLevel' field.
      * @return The value.
      */
    public java.lang.String getCurrentLevel() {
      return currentLevel;
    }


    /**
      * Sets the value of the 'currentLevel' field.
      * @param value The value of 'currentLevel'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setCurrentLevel(java.lang.String value) {
      validate(fields()[5], value);
      this.currentLevel = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currentLevel' field has been set.
      * @return True if the 'currentLevel' field has been set, false otherwise.
      */
    public boolean hasCurrentLevel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currentLevel' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearCurrentLevel() {
      currentLevel = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hireDate' field.
      * @return The value.
      */
    public java.lang.String getHireDate() {
      return hireDate;
    }


    /**
      * Sets the value of the 'hireDate' field.
      * @param value The value of 'hireDate'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setHireDate(java.lang.String value) {
      validate(fields()[6], value);
      this.hireDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hireDate' field has been set.
      * @return True if the 'hireDate' field has been set, false otherwise.
      */
    public boolean hasHireDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hireDate' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearHireDate() {
      hireDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'certifications' field.
      * @return The value.
      */
    public java.lang.Integer getCertifications() {
      return certifications;
    }


    /**
      * Sets the value of the 'certifications' field.
      * @param value The value of 'certifications'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setCertifications(java.lang.Integer value) {
      validate(fields()[7], value);
      this.certifications = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'certifications' field has been set.
      * @return True if the 'certifications' field has been set, false otherwise.
      */
    public boolean hasCertifications() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'certifications' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearCertifications() {
      certifications = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'productionProjects' field.
      * @return The value.
      */
    public java.lang.Integer getProductionProjects() {
      return productionProjects;
    }


    /**
      * Sets the value of the 'productionProjects' field.
      * @param value The value of 'productionProjects'.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder setProductionProjects(java.lang.Integer value) {
      validate(fields()[8], value);
      this.productionProjects = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'productionProjects' field has been set.
      * @return True if the 'productionProjects' field has been set, false otherwise.
      */
    public boolean hasProductionProjects() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'productionProjects' field.
      * @return This builder.
      */
    public pe.marcolopez.apps.epp.ms.criteria.kafka.event.EmployeeEligibleEvent.Builder clearProductionProjects() {
      productionProjects = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeEligibleEvent build() {
      try {
        EmployeeEligibleEvent record = new EmployeeEligibleEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.firstname = fieldSetFlags()[1] ? this.firstname : (java.lang.String) defaultValue(fields()[1]);
        record.lastname = fieldSetFlags()[2] ? this.lastname : (java.lang.String) defaultValue(fields()[2]);
        record.address = fieldSetFlags()[3] ? this.address : (java.lang.String) defaultValue(fields()[3]);
        record.email = fieldSetFlags()[4] ? this.email : (java.lang.String) defaultValue(fields()[4]);
        record.currentLevel = fieldSetFlags()[5] ? this.currentLevel : (java.lang.String) defaultValue(fields()[5]);
        record.hireDate = fieldSetFlags()[6] ? this.hireDate : (java.lang.String) defaultValue(fields()[6]);
        record.certifications = fieldSetFlags()[7] ? this.certifications : (java.lang.Integer) defaultValue(fields()[7]);
        record.productionProjects = fieldSetFlags()[8] ? this.productionProjects : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeEligibleEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeEligibleEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeEligibleEvent>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeEligibleEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.firstname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.firstname);
    }

    if (this.lastname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastname);
    }

    if (this.address == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address);
    }

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.currentLevel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.currentLevel);
    }

    if (this.hireDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hireDate);
    }

    if (this.certifications == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.certifications);
    }

    if (this.productionProjects == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.productionProjects);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firstname = null;
      } else {
        this.firstname = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastname = null;
      } else {
        this.lastname = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.address = null;
      } else {
        this.address = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currentLevel = null;
      } else {
        this.currentLevel = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hireDate = null;
      } else {
        this.hireDate = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.certifications = null;
      } else {
        this.certifications = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.productionProjects = null;
      } else {
        this.productionProjects = in.readInt();
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firstname = null;
          } else {
            this.firstname = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastname = null;
          } else {
            this.lastname = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address = null;
          } else {
            this.address = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currentLevel = null;
          } else {
            this.currentLevel = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hireDate = null;
          } else {
            this.hireDate = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.certifications = null;
          } else {
            this.certifications = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.productionProjects = null;
          } else {
            this.productionProjects = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










